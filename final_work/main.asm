NUM0 EQU 11000000B
NUM1 EQU 11111001B
NUM2 EQU 10100100B
NUM3 EQU 10110000B
NUM4 EQU 10011001B
NUM5 EQU 10010010B
NUM6 EQU 10000010B
NUM7 EQU 11111000B
NUM8 EQU 10000000B
NUM9 EQU 10010000B
MOD_CHOSE EQU 35H
SET_WHITCH EQU 36H
DPTL EQU 37H
DPTH EQU 38H
BLINK_COUNTER EQU 39H
CS_BOTTOM EQU 21H//外部中断1数据存储地址
IR_BOTTOM EQU 22H//计数器1数据存储地址
BLINK EQU 23H
TO EQU 20H //一秒计时标志位

ORG 0000H
LJMP MAIN
ORG 0003H
LJMP MODSET
ORG 000BH
LJMP TIMEOUT
ORG 0013H
LJMP CHOSE_OR_START
ORG 001BH
LJMP INC_OR_RESET 

MAIN:
INIT:
	CLR IR_BOTTOM
	CLR CS_BOTTOM
	MOV SET_WHITCH,#11110111B
	MOV BLINK_COUNTER,#20H
	MOV BLINK_COUNTER,#10
	MOV P2,#11101111B
	MOV R0,#30H//指向4个位置存的数字
	MOV R7,#20
	//MOV 30H,#04H
	CLR TO
	MOV MOD_CHOSE,#00H
	MOV DPTH,#10H
	MOV DPTL,#00H
	MOV P0,#NUM0
	MOV SP,#50H
	MOV TH0,#3CH
	MOV TL0,#0B0H
	MOV TH1,#0FFH
	MOV TL1,#0FFH
	MOV TMOD,#01100001B//方式二工作，t0计时，t1外部中断
	MOV IP,#00001101B//t0优先级最低
	MOV TCON,#01010101B//外部中断负跳变有效，开计数器
	MOV IE,  #10000011B//只打开定时器0及外部中断0；计数器1和外部中断1在tset及counter开启，在clock关闭
//**********************************************************************************//
CLOCK:
	SETB TR0
	MOV IE,  #10000011B
	MOV A,P2
	RR A
	CJNE A,#01111111B,LOOP_NEXT
		MOV A, #11110111B
		MOV P0,#0FFH	
	LOOP_NEXT:
	MOV P2,A
	MOV A,@R0
	MOV DPTR,#1100H
	MOVC A,@A+DPTR
	MOV P0,A
	MOV C,P2.1
	MOV P0.7,C
	SEC_NEXT:
	INC R0
	CJNE R0,#34H,R0_NEXT
		MOV R0,#30H
	R0_NEXT:
	JBC TO,LOOP_INCREASE//TO为1时清零，并进行进位处理		
	LCALL DELAY
	LJMP WHITCH_MOD
	LOOP_INCREASE:
	ACALL INCREASE
	SJMP R0_NEXT
//*****************************************************
INCREASE:
		INC 30H
		MOV R1,#30H
		CJNE @R1,#0AH,INC_BREAK//显示是否也随delay延迟?
			MOV @R1,#00H
			INC R1
			INC @R1
			CJNE @R1,#06H,INC_BREAK
				MOV @R1,#00H
				INC R1
				INC@R1
				CJNE @R1,#04H,INC_NEXT
					INC @R1
					CJNE @R1,#02H,INC_NEXT
						MOV 32H,#00H
						MOV @R1,#00H
						LJMP INC_BREAK
				INC_NEXT:
					MOV R1,#32H
					CJNE @R1,#0AH,INC_BREAK
						CLR 32H
						INC 33H
INC_BREAK:   
RET
//*************************************************************//
TSET:
ET_WHITCH,TSET_NEXT1
		 DJNZ BLINK_COUNTER,TSET_NEXT1
		 	JBC BLINK,TSET_NEXT1
				CLR TR0
	MOV IE,  #10001111B
	MOV A,P2
	JNB BLINK,TSET_NEXT0
	RR A
	TSET_NEXT0:
	RR A
	CJNE A,#01111111B,TSET_NEXT
		MOV A, #11110111B	
	TSET_NEXT:
	CJNE A,S	SETB BLINK			 	 
	TSET_NEXT1:
	JNB BLINK,TSET_NEXT2
		SJMP INC_R0
	TSET_NEXT2:	
	MOV P2,A
	MOV A,@R0
	MOV DPTR,#1100H
	MOVC A,@A+DPTR
	MOV P0,A
	INC_R0:
	INC R0
	CJNE R0,#34H,TSET_R0_NEXT
		MOV R0,#30H
	TSET_R0_NEXT:
	ACALL DELAY
	//IF_CS
	JBC CS_BOTTOM,TSET_NEXT4
		MOV A,SET_WHITCH
		RR A
		CJNE A,#01111111B,SET_WHITCH_NEXT
			MOV A, #11110111B
		SET_WHITCH_NEXT:
		MOV SET_WHITCH,A

	//IF_IR
	JBC IR_BOTTOM,TSET_NEXT4 
	MOV A,SET_WHITCH
	JB ACC.0,IR_NEXT0
		INC 30H
	IR_NEXT0:
	JB ACC.1,IR_NEXT1
		INC 31H
	IR_NEXT1:
	JB ACC.2,IR_NEXT2
		INC 32H
	IR_NEXT2:
		INC 33H			
TSET_NEXT4:LJMP WHITCH_MOD
//***************************************************************//
TCOUNTER:
	CLR TR0
	MOV IE,  #10001111B

LJMP WHITCH_MOD
//*****************************************************************//

WHITCH_MOD:
	MOV DPH,DPTH
	MOV DPL,DPTL
	MOV A,MOD_CHOSE
	JMP @A+DPTR

	

//*************************************************************//
MODSET://按下int0后MOD_SET+=3
	CLR EA
	PUSH ACC
	MOV A,MOD_CHOSE
	ADD A,#03H
	MOV MOD_CHOSE,A
	CJNE A,#09H,SET_EXIT
		MOV MOD_CHOSE,#00H
	SET_EXIT:
	POP	ACC
	SETB EA
RETI

//************************************************************//
TIMEOUT://TO高电平有效
	MOV TH0,#3CH
	MOV TL0,#0B0H
		DJNZ R7,TOBREAK
			MOV R7,#20
			SETB TO 

TOBREAK:
RETI
//************************************************//
CHOSE_OR_START:
CLR EA
PUSH ACC
	/*MOV A,CS_BOTTOM
	DEC A
	JZ CS_EXIT//1置0
		ADD A,#02H//0置1
CS_EXIT:
MOV CS_BOTTOM,A*/
SETB CS_BOTTOM
POP ACC
SETB EA
RETI
 //********************************************//

//***********************************************//
INC_OR_RESET:
CLR EA
PUSH ACC
	/*MOV A,IR_BOTTOM
	DEC A
	JZ IR_EXIT//1置0
		ADD A,#02H//0置1*/
/*IR_EXIT:
MOV IR_BOTTOM,A*/
SETB IR_BOTTOM
POP ACC
SETB EA
	
RETI

DELAY:
	MOV R6,#07H
	DELAY_LOOP:
		MOV R5,#00H
		DJNZ R5,$
	DJNZ R6,DELAY_LOOP
RET
ORG 1000H
LJMP CLOCK
ORG 1003H
LJMP TSET
ORG 1006H
LJMP TCOUNTER
ORG 1100H
DB	NUM0,NUM1,NUM2,NUM3,NUM4,NUM5,NUM6,NUM7,NUM8,NUM9

END


	
	

